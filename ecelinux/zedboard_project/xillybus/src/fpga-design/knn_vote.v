// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module knn_vote (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set_0_0_V_read,
        knn_set_0_1_V_read,
        knn_set_0_2_V_read,
        knn_set_1_0_V_read,
        knn_set_1_1_V_read,
        knn_set_1_2_V_read,
        knn_set_2_0_V_read,
        knn_set_2_1_V_read,
        knn_set_2_2_V_read,
        knn_set_3_0_V_read,
        knn_set_3_1_V_read,
        knn_set_3_2_V_read,
        knn_set_4_0_V_read,
        knn_set_4_1_V_read,
        knn_set_4_2_V_read,
        knn_set_5_0_V_read,
        knn_set_5_1_V_read,
        knn_set_5_2_V_read,
        knn_set_6_0_V_read,
        knn_set_6_1_V_read,
        knn_set_6_2_V_read,
        knn_set_7_0_V_read,
        knn_set_7_1_V_read,
        knn_set_7_2_V_read,
        knn_set_8_0_V_read,
        knn_set_8_1_V_read,
        knn_set_8_2_V_read,
        knn_set_9_0_V_read,
        knn_set_9_1_V_read,
        knn_set_9_2_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] knn_set_0_0_V_read;
input  [5:0] knn_set_0_1_V_read;
input  [5:0] knn_set_0_2_V_read;
input  [5:0] knn_set_1_0_V_read;
input  [5:0] knn_set_1_1_V_read;
input  [5:0] knn_set_1_2_V_read;
input  [5:0] knn_set_2_0_V_read;
input  [5:0] knn_set_2_1_V_read;
input  [5:0] knn_set_2_2_V_read;
input  [5:0] knn_set_3_0_V_read;
input  [5:0] knn_set_3_1_V_read;
input  [5:0] knn_set_3_2_V_read;
input  [5:0] knn_set_4_0_V_read;
input  [5:0] knn_set_4_1_V_read;
input  [5:0] knn_set_4_2_V_read;
input  [5:0] knn_set_5_0_V_read;
input  [5:0] knn_set_5_1_V_read;
input  [5:0] knn_set_5_2_V_read;
input  [5:0] knn_set_6_0_V_read;
input  [5:0] knn_set_6_1_V_read;
input  [5:0] knn_set_6_2_V_read;
input  [5:0] knn_set_7_0_V_read;
input  [5:0] knn_set_7_1_V_read;
input  [5:0] knn_set_7_2_V_read;
input  [5:0] knn_set_8_0_V_read;
input  [5:0] knn_set_8_1_V_read;
input  [5:0] knn_set_8_2_V_read;
input  [5:0] knn_set_9_0_V_read;
input  [5:0] knn_set_9_1_V_read;
input  [5:0] knn_set_9_2_V_read;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] k_V_fu_461_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_V_fu_533_p2;
reg   [3:0] i_V_reg_1248;
wire    ap_CS_fsm_state3;
wire   [5:0] knn_0_2_V_12_fu_539_p1;
reg   [5:0] knn_0_2_V_12_reg_1253;
wire   [0:0] icmp_ln887_1_fu_527_p2;
wire   [4:0] sub_ln887_fu_559_p2;
reg   [4:0] sub_ln887_reg_1260;
wire   [1:0] j_V_1_fu_581_p2;
reg   [1:0] j_V_1_reg_1282;
wire    ap_CS_fsm_state4;
wire   [1:0] k_V_1_fu_597_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] select_ln160_fu_637_p3;
wire   [0:0] icmp_ln887_5_fu_591_p2;
wire   [5:0] knn_1_2_V_12_fu_654_p32;
reg   [5:0] knn_1_2_V_12_reg_1300;
wire   [1:0] trunc_ln887_1_fu_690_p1;
reg   [1:0] trunc_ln887_1_reg_1308;
wire   [1:0] i_V_1_fu_878_p2;
reg   [1:0] i_V_1_reg_1318;
wire    ap_CS_fsm_state7;
wire   [5:0] tmp_fu_884_p5;
reg   [5:0] tmp_reg_1323;
wire   [0:0] icmp_ln887_2_fu_872_p2;
wire   [3:0] digit_V_fu_896_p1;
reg   [3:0] digit_V_reg_1328;
wire   [1:0] j_V_fu_906_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] max_count_V_1_fu_991_p3;
wire   [0:0] icmp_ln887_4_fu_900_p2;
wire   [1:0] ap_phi_mux_t_V_phi_fu_330_p4;
reg   [1:0] t_V_reg_326;
wire   [0:0] icmp_ln887_fu_455_p2;
reg   [3:0] t_V_1_reg_337;
wire   [0:0] icmp_ln887_3_fu_575_p2;
reg   [1:0] t_V_5_reg_348;
wire    ap_CS_fsm_state6;
reg   [3:0] p_026_0_reg_360;
reg   [1:0] max_idx_V_reg_371;
reg   [1:0] t_V_3_reg_382;
reg   [3:0] t_V_2_reg_394;
reg   [1:0] t_V_4_reg_405;
wire   [5:0] knn_0_0_V_0_fu_90;
wire   [5:0] knn_0_1_V_0_fu_94;
wire   [5:0] knn_0_2_V_0_fu_98;
wire   [5:0] knn_1_0_V_0_fu_102;
wire   [5:0] knn_1_1_V_0_fu_106;
wire   [5:0] knn_1_2_V_0_fu_110;
reg   [5:0] knn_0_2_V_1_fu_114;
wire   [5:0] knn_0_2_V_11_fu_834_p3;
reg   [5:0] knn_0_2_V_3_fu_118;
wire   [5:0] knn_0_2_V_10_fu_826_p3;
reg   [5:0] knn_0_2_V_2_fu_122;
wire   [5:0] knn_0_2_V_9_fu_818_p3;
reg   [5:0] knn_1_2_V_1_fu_126;
wire   [5:0] knn_1_2_V_11_fu_810_p3;
reg   [5:0] knn_1_2_V_3_fu_130;
wire   [5:0] knn_1_2_V_10_fu_802_p3;
reg   [5:0] knn_1_2_V_2_fu_134;
wire   [5:0] knn_1_2_V_9_fu_794_p3;
reg   [3:0] agg_result_V_0_fu_138;
wire   [3:0] select_ln895_1_fu_983_p3;
reg   [3:0] p_0198_0_fu_142;
wire   [3:0] select_ln895_fu_975_p3;
wire   [2:0] trunc_ln887_fu_547_p1;
wire   [4:0] shl_ln_fu_551_p3;
wire   [4:0] zext_ln887_fu_543_p1;
wire   [1:0] tmp_4_fu_619_p4;
wire   [5:0] tmp_3_fu_603_p5;
wire   [5:0] tmp_4_fu_619_p5;
wire   [0:0] icmp_ln895_1_fu_631_p2;
wire   [3:0] zext_ln321_fu_587_p1;
wire   [4:0] zext_ln887_1_fu_645_p1;
wire   [4:0] knn_1_2_V_12_fu_654_p31;
wire   [5:0] tmp_2_fu_694_p5;
wire   [0:0] icmp_ln321_fu_710_p2;
wire   [0:0] icmp_ln321_1_fu_722_p2;
wire   [5:0] knn_1_2_V_fu_715_p3;
wire   [5:0] knn_1_2_V_6_fu_735_p3;
wire   [5:0] knn_0_2_V_fu_757_p3;
wire   [5:0] knn_0_2_V_6_fu_772_p3;
wire   [0:0] icmp_ln887_6_fu_705_p2;
wire   [5:0] knn_1_2_V_5_fu_727_p3;
wire   [5:0] knn_1_2_V_7_fu_742_p3;
wire   [5:0] knn_1_2_V_8_fu_750_p3;
wire   [5:0] knn_0_2_V_5_fu_764_p3;
wire   [5:0] knn_0_2_V_7_fu_779_p3;
wire   [5:0] knn_0_2_V_8_fu_787_p3;
wire   [0:0] icmp_ln879_1_fu_921_p2;
wire   [5:0] select_ln879_fu_927_p3;
wire   [0:0] icmp_ln879_fu_935_p2;
wire   [3:0] count_V_fu_940_p2;
wire   [3:0] max_count_V_fu_946_p3;
wire   [0:0] icmp_ln895_2_fu_954_p2;
wire   [0:0] icmp_ln895_fu_915_p2;
wire   [3:0] select_ln184_fu_960_p3;
wire   [3:0] select_ln184_1_fu_968_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U1(
    .din0(knn_1_2_V_1_fu_126),
    .din1(knn_1_2_V_3_fu_130),
    .din2(knn_1_2_V_2_fu_134),
    .din3(max_idx_V_reg_371),
    .dout(tmp_3_fu_603_p5)
);

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U2(
    .din0(knn_1_2_V_1_fu_126),
    .din1(knn_1_2_V_3_fu_130),
    .din2(knn_1_2_V_2_fu_134),
    .din3(tmp_4_fu_619_p4),
    .dout(tmp_4_fu_619_p5)
);

dut_mux_305_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 6 ),
    .din8_WIDTH( 6 ),
    .din9_WIDTH( 6 ),
    .din10_WIDTH( 6 ),
    .din11_WIDTH( 6 ),
    .din12_WIDTH( 6 ),
    .din13_WIDTH( 6 ),
    .din14_WIDTH( 6 ),
    .din15_WIDTH( 6 ),
    .din16_WIDTH( 6 ),
    .din17_WIDTH( 6 ),
    .din18_WIDTH( 6 ),
    .din19_WIDTH( 6 ),
    .din20_WIDTH( 6 ),
    .din21_WIDTH( 6 ),
    .din22_WIDTH( 6 ),
    .din23_WIDTH( 6 ),
    .din24_WIDTH( 6 ),
    .din25_WIDTH( 6 ),
    .din26_WIDTH( 6 ),
    .din27_WIDTH( 6 ),
    .din28_WIDTH( 6 ),
    .din29_WIDTH( 6 ),
    .din30_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
dut_mux_305_6_1_1_U3(
    .din0(knn_set_0_0_V_read),
    .din1(knn_set_0_1_V_read),
    .din2(knn_set_0_2_V_read),
    .din3(knn_set_1_0_V_read),
    .din4(knn_set_1_1_V_read),
    .din5(knn_set_1_2_V_read),
    .din6(knn_set_2_0_V_read),
    .din7(knn_set_2_1_V_read),
    .din8(knn_set_2_2_V_read),
    .din9(knn_set_3_0_V_read),
    .din10(knn_set_3_1_V_read),
    .din11(knn_set_3_2_V_read),
    .din12(knn_set_4_0_V_read),
    .din13(knn_set_4_1_V_read),
    .din14(knn_set_4_2_V_read),
    .din15(knn_set_5_0_V_read),
    .din16(knn_set_5_1_V_read),
    .din17(knn_set_5_2_V_read),
    .din18(knn_set_6_0_V_read),
    .din19(knn_set_6_1_V_read),
    .din20(knn_set_6_2_V_read),
    .din21(knn_set_7_0_V_read),
    .din22(knn_set_7_1_V_read),
    .din23(knn_set_7_2_V_read),
    .din24(knn_set_8_0_V_read),
    .din25(knn_set_8_1_V_read),
    .din26(knn_set_8_2_V_read),
    .din27(knn_set_9_0_V_read),
    .din28(knn_set_9_1_V_read),
    .din29(knn_set_9_2_V_read),
    .din30(knn_1_2_V_12_fu_654_p31),
    .dout(knn_1_2_V_12_fu_654_p32)
);

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U4(
    .din0(knn_1_2_V_1_fu_126),
    .din1(knn_1_2_V_3_fu_130),
    .din2(knn_1_2_V_2_fu_134),
    .din3(trunc_ln887_1_reg_1308),
    .dout(tmp_2_fu_694_p5)
);

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U5(
    .din0(knn_0_2_V_1_fu_114),
    .din1(knn_0_2_V_3_fu_118),
    .din2(knn_0_2_V_2_fu_122),
    .din3(t_V_3_reg_382),
    .dout(tmp_fu_884_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd0))) begin
        agg_result_V_0_fu_138 <= select_ln895_1_fu_983_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd1))) begin
        agg_result_V_0_fu_138 <= 4'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_0_2_V_1_fu_114 <= knn_0_2_V_11_fu_834_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_0_2_V_1_fu_114 <= knn_0_0_V_0_fu_90;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_0_2_V_2_fu_122 <= knn_0_2_V_9_fu_818_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_0_2_V_2_fu_122 <= knn_0_2_V_0_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_0_2_V_3_fu_118 <= knn_0_2_V_10_fu_826_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_0_2_V_3_fu_118 <= knn_0_1_V_0_fu_94;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_1_2_V_1_fu_126 <= knn_1_2_V_11_fu_810_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_1_2_V_1_fu_126 <= knn_1_0_V_0_fu_102;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_1_2_V_2_fu_134 <= knn_1_2_V_9_fu_794_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_1_2_V_2_fu_134 <= knn_1_2_V_0_fu_110;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        knn_1_2_V_3_fu_130 <= knn_1_2_V_10_fu_802_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        knn_1_2_V_3_fu_130 <= knn_1_1_V_0_fu_106;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_3_fu_575_p2 == 1'd0))) begin
        max_idx_V_reg_371 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln887_5_fu_591_p2 == 1'd0))) begin
        max_idx_V_reg_371 <= k_V_1_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd0))) begin
        p_0198_0_fu_142 <= select_ln895_fu_975_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd1))) begin
        p_0198_0_fu_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_3_fu_575_p2 == 1'd0))) begin
        p_026_0_reg_360 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln887_5_fu_591_p2 == 1'd0))) begin
        p_026_0_reg_360 <= select_ln160_fu_637_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_3_fu_575_p2 == 1'd1))) begin
        t_V_1_reg_337 <= i_V_reg_1248;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
        t_V_1_reg_337 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd0))) begin
        t_V_2_reg_394 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd0))) begin
        t_V_2_reg_394 <= max_count_V_1_fu_991_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd1))) begin
        t_V_3_reg_382 <= i_V_1_reg_1318;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd1))) begin
        t_V_3_reg_382 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd0))) begin
        t_V_4_reg_405 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd0))) begin
        t_V_4_reg_405 <= j_V_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_5_reg_348 <= j_V_1_reg_1282;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd0))) begin
        t_V_5_reg_348 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd0))) begin
        t_V_reg_326 <= k_V_fu_461_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_326 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd0))) begin
        digit_V_reg_1328 <= digit_V_fu_896_p1;
        tmp_reg_1323 <= tmp_fu_884_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_V_1_reg_1318 <= i_V_1_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_V_reg_1248 <= i_V_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_V_1_reg_1282 <= j_V_1_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd0))) begin
        knn_0_2_V_12_reg_1253[3 : 0] <= knn_0_2_V_12_fu_539_p1[3 : 0];
        sub_ln887_reg_1260 <= sub_ln887_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln887_5_fu_591_p2 == 1'd1))) begin
        knn_1_2_V_12_reg_1300 <= knn_1_2_V_12_fu_654_p32;
        trunc_ln887_1_reg_1308 <= trunc_ln887_1_fu_690_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_1_fu_527_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_3_fu_575_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln887_5_fu_591_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln887_2_fu_872_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln887_4_fu_900_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_t_V_phi_fu_330_p4 = t_V_reg_326;

assign ap_return = agg_result_V_0_fu_138;

assign count_V_fu_940_p2 = (t_V_2_reg_394 + 4'd1);

assign digit_V_fu_896_p1 = tmp_fu_884_p5[3:0];

assign i_V_1_fu_878_p2 = (t_V_3_reg_382 + 2'd1);

assign i_V_fu_533_p2 = (t_V_1_reg_337 + 4'd1);

assign icmp_ln321_1_fu_722_p2 = ((trunc_ln887_1_reg_1308 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_710_p2 = ((trunc_ln887_1_reg_1308 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_921_p2 = ((t_V_4_reg_405 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_935_p2 = ((tmp_reg_1323 == select_ln879_fu_927_p3) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_527_p2 = ((t_V_1_reg_337 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_872_p2 = ((t_V_3_reg_382 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_575_p2 = ((t_V_5_reg_348 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_900_p2 = ((t_V_4_reg_405 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_591_p2 = ((max_idx_V_reg_371 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln887_6_fu_705_p2 = ((knn_1_2_V_12_reg_1300 < tmp_2_fu_694_p5) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_455_p2 = ((t_V_reg_326 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_631_p2 = ((tmp_3_fu_603_p5 > tmp_4_fu_619_p5) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_954_p2 = ((max_count_V_fu_946_p3 > p_0198_0_fu_142) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_915_p2 = ((t_V_4_reg_405 > t_V_3_reg_382) ? 1'b1 : 1'b0);

assign j_V_1_fu_581_p2 = (t_V_5_reg_348 + 2'd1);

assign j_V_fu_906_p2 = (t_V_4_reg_405 + 2'd1);

assign k_V_1_fu_597_p2 = (max_idx_V_reg_371 + 2'd1);

assign k_V_fu_461_p2 = (t_V_reg_326 + 2'd1);

assign knn_0_0_V_0_fu_90 = 6'd50;

assign knn_0_1_V_0_fu_94 = 6'd50;

assign knn_0_2_V_0_fu_98 = 6'd50;

assign knn_0_2_V_10_fu_826_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_0_2_V_7_fu_779_p3 : knn_0_2_V_3_fu_118);

assign knn_0_2_V_11_fu_834_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_0_2_V_8_fu_787_p3 : knn_0_2_V_1_fu_114);

assign knn_0_2_V_12_fu_539_p1 = t_V_1_reg_337;

assign knn_0_2_V_5_fu_764_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_0_2_V_2_fu_122 : knn_0_2_V_fu_757_p3);

assign knn_0_2_V_6_fu_772_p3 = ((icmp_ln321_fu_710_p2[0:0] === 1'b1) ? knn_0_2_V_12_reg_1253 : knn_0_2_V_3_fu_118);

assign knn_0_2_V_7_fu_779_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_0_2_V_3_fu_118 : knn_0_2_V_6_fu_772_p3);

assign knn_0_2_V_8_fu_787_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_0_2_V_12_reg_1253 : knn_0_2_V_1_fu_114);

assign knn_0_2_V_9_fu_818_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_0_2_V_5_fu_764_p3 : knn_0_2_V_2_fu_122);

assign knn_0_2_V_fu_757_p3 = ((icmp_ln321_fu_710_p2[0:0] === 1'b1) ? knn_0_2_V_2_fu_122 : knn_0_2_V_12_reg_1253);

assign knn_1_0_V_0_fu_102 = 6'd50;

assign knn_1_1_V_0_fu_106 = 6'd50;

assign knn_1_2_V_0_fu_110 = 6'd50;

assign knn_1_2_V_10_fu_802_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_1_2_V_7_fu_742_p3 : knn_1_2_V_3_fu_130);

assign knn_1_2_V_11_fu_810_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_1_2_V_8_fu_750_p3 : knn_1_2_V_1_fu_126);

assign knn_1_2_V_12_fu_654_p31 = (sub_ln887_reg_1260 + zext_ln887_1_fu_645_p1);

assign knn_1_2_V_5_fu_727_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_1_2_V_2_fu_134 : knn_1_2_V_fu_715_p3);

assign knn_1_2_V_6_fu_735_p3 = ((icmp_ln321_fu_710_p2[0:0] === 1'b1) ? knn_1_2_V_12_reg_1300 : knn_1_2_V_3_fu_130);

assign knn_1_2_V_7_fu_742_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_1_2_V_3_fu_130 : knn_1_2_V_6_fu_735_p3);

assign knn_1_2_V_8_fu_750_p3 = ((icmp_ln321_1_fu_722_p2[0:0] === 1'b1) ? knn_1_2_V_12_reg_1300 : knn_1_2_V_1_fu_126);

assign knn_1_2_V_9_fu_794_p3 = ((icmp_ln887_6_fu_705_p2[0:0] === 1'b1) ? knn_1_2_V_5_fu_727_p3 : knn_1_2_V_2_fu_134);

assign knn_1_2_V_fu_715_p3 = ((icmp_ln321_fu_710_p2[0:0] === 1'b1) ? knn_1_2_V_2_fu_134 : knn_1_2_V_12_reg_1300);

assign max_count_V_1_fu_991_p3 = ((icmp_ln895_fu_915_p2[0:0] === 1'b1) ? max_count_V_fu_946_p3 : t_V_2_reg_394);

assign max_count_V_fu_946_p3 = ((icmp_ln879_fu_935_p2[0:0] === 1'b1) ? count_V_fu_940_p2 : t_V_2_reg_394);

assign select_ln160_fu_637_p3 = ((icmp_ln895_1_fu_631_p2[0:0] === 1'b1) ? zext_ln321_fu_587_p1 : p_026_0_reg_360);

assign select_ln184_1_fu_968_p3 = ((icmp_ln895_2_fu_954_p2[0:0] === 1'b1) ? digit_V_reg_1328 : agg_result_V_0_fu_138);

assign select_ln184_fu_960_p3 = ((icmp_ln895_2_fu_954_p2[0:0] === 1'b1) ? max_count_V_fu_946_p3 : p_0198_0_fu_142);

assign select_ln879_fu_927_p3 = ((icmp_ln879_1_fu_921_p2[0:0] === 1'b1) ? knn_0_2_V_3_fu_118 : knn_0_2_V_2_fu_122);

assign select_ln895_1_fu_983_p3 = ((icmp_ln895_fu_915_p2[0:0] === 1'b1) ? select_ln184_1_fu_968_p3 : agg_result_V_0_fu_138);

assign select_ln895_fu_975_p3 = ((icmp_ln895_fu_915_p2[0:0] === 1'b1) ? select_ln184_fu_960_p3 : p_0198_0_fu_142);

assign shl_ln_fu_551_p3 = {{trunc_ln887_fu_547_p1}, {2'd0}};

assign sub_ln887_fu_559_p2 = (shl_ln_fu_551_p3 - zext_ln887_fu_543_p1);

assign tmp_4_fu_619_p4 = p_026_0_reg_360[1:0];

assign trunc_ln887_1_fu_690_p1 = p_026_0_reg_360[1:0];

assign trunc_ln887_fu_547_p1 = t_V_1_reg_337[2:0];

assign zext_ln321_fu_587_p1 = max_idx_V_reg_371;

assign zext_ln887_1_fu_645_p1 = t_V_5_reg_348;

assign zext_ln887_fu_543_p1 = t_V_1_reg_337;

always @ (posedge ap_clk) begin
    knn_0_2_V_12_reg_1253[5:4] <= 2'b00;
end

endmodule //knn_vote
